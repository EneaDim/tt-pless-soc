// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pwm_reg_pkg;

  // Param list
  parameter int NOutputs = 2;

  // Address widths within the block
  parameter int BlockAw = 5;
  parameter int AW = BlockAw;
  parameter int DW = 32;
  parameter int DBW = DW/8;                    // Byte Width

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } cntr_en;
    struct packed {
      logic [3:0]  q;
      logic        qe;
    } dc_resn;
    struct packed {
      logic [26:0] q;
      logic        qe;
    } clk_div;
  } pwm_reg2hw_cfg_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } pwm_reg2hw_pwm_en_mreg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } pwm_reg2hw_invert_mreg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
      logic        qe;
    } phase_delay;
    struct packed {
      logic [15:0] q;
      logic        qe;
    } duty_cycle;
  } pwm_reg2hw_pwm_param_mreg_t;

  // Register -> HW type
  typedef struct packed {
    pwm_reg2hw_cfg_reg_t cfg; // [110:76]
    pwm_reg2hw_pwm_en_mreg_t [1:0] pwm_en; // [75:72]
    pwm_reg2hw_invert_mreg_t [1:0] invert; // [71:68]
    pwm_reg2hw_pwm_param_mreg_t [1:0] pwm_param; // [67:0]
  } pwm_reg2hw_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PWM_REGWEN_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] PWM_CFG_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] PWM_PWM_EN_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] PWM_INVERT_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] PWM_PWM_PARAM_0_OFFSET = 5'h 10;
  parameter logic [BlockAw-1:0] PWM_PWM_PARAM_1_OFFSET = 5'h 14;

  // Register index
  typedef enum int {
    PWM_REGWEN,
    PWM_CFG,
    PWM_PWM_EN,
    PWM_INVERT,
    PWM_PWM_PARAM_0,
    PWM_PWM_PARAM_1
  } pwm_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PWM_PERMIT [6] = '{
    4'b 0001, // index[0] PWM_REGWEN
    4'b 1111, // index[1] PWM_CFG
    4'b 0001, // index[2] PWM_PWM_EN
    4'b 0001, // index[3] PWM_INVERT
    4'b 1111, // index[4] PWM_PWM_PARAM_0
    4'b 1111  // index[5] PWM_PWM_PARAM_1
  };

  parameter type reg_req_t = struct packed {
    logic           valid;
    logic           write;
    logic [AW-1:0]  addr;
    logic [DW-1:0]  wdata;
    logic [DBW-1:0] wstrb;
  };

  parameter type reg_rsp_t = struct packed {
    logic [DW-1:0]  rdata;
    logic           error;
    logic           ready;
  };

endpackage
