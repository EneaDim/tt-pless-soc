// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package spi_host_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 4;
  parameter int AW = BlockAw;
  parameter int DW = 32;
  parameter int DBW = DW/8;                    // Byte Width

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } rxrst;
    struct packed {
      logic        q;
    } txrst;
    struct packed {
      logic        q;
    } en;
  } spi_host_reg2hw_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        re;
    } rxempty;
    struct packed {
      logic        q;
      logic        re;
    } rxfull;
    struct packed {
      logic        q;
      logic        re;
    } txempty;
    struct packed {
      logic        q;
      logic        re;
    } txfull;
  } spi_host_reg2hw_status_reg_t;

  typedef struct packed {
    logic [7:0]  q;
    logic        re;
  } spi_host_reg2hw_rdata_reg_t;

  typedef struct packed {
    logic [7:0]  q;
    logic        qe;
  } spi_host_reg2hw_wdata_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } txfull;
    struct packed {
      logic        d;
    } txempty;
    struct packed {
      logic        d;
    } rxfull;
    struct packed {
      logic        d;
    } rxempty;
  } spi_host_hw2reg_status_reg_t;

  typedef struct packed {
    logic [7:0]  d;
  } spi_host_hw2reg_rdata_reg_t;

  // Register -> HW type
  typedef struct packed {
    spi_host_reg2hw_ctrl_reg_t ctrl; // [28:26]
    spi_host_reg2hw_status_reg_t status; // [25:18]
    spi_host_reg2hw_rdata_reg_t rdata; // [17:9]
    spi_host_reg2hw_wdata_reg_t wdata; // [8:0]
  } spi_host_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    spi_host_hw2reg_status_reg_t status; // [11:8]
    spi_host_hw2reg_rdata_reg_t rdata; // [7:0]
  } spi_host_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SPI_HOST_CTRL_OFFSET = 4'h 0;
  parameter logic [BlockAw-1:0] SPI_HOST_STATUS_OFFSET = 4'h 4;
  parameter logic [BlockAw-1:0] SPI_HOST_RDATA_OFFSET = 4'h 8;
  parameter logic [BlockAw-1:0] SPI_HOST_WDATA_OFFSET = 4'h c;

  // Reset values for hwext registers and their fields
  parameter logic [3:0] SPI_HOST_STATUS_RESVAL = 4'h 0;
  parameter logic [7:0] SPI_HOST_RDATA_RESVAL = 8'h 0;

  // Register index
  typedef enum int {
    SPI_HOST_CTRL,
    SPI_HOST_STATUS,
    SPI_HOST_RDATA,
    SPI_HOST_WDATA
  } spi_host_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SPI_HOST_PERMIT [4] = '{
    4'b 0001, // index[0] SPI_HOST_CTRL
    4'b 0001, // index[1] SPI_HOST_STATUS
    4'b 0001, // index[2] SPI_HOST_RDATA
    4'b 0001  // index[3] SPI_HOST_WDATA
  };

  parameter type reg_req_t = struct packed {
    logic           valid;
    logic           write;
    logic [AW-1:0]  addr;
    logic [DW-1:0]  wdata;
    logic [DBW-1:0] wstrb;
  };

  parameter type reg_rsp_t = struct packed {
    logic [DW-1:0]  rdata;
    logic           error;
    logic           ready;
  };

endpackage
