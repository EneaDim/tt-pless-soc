// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package gpio_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;
  parameter int AW = BlockAw;
  parameter int DW = 32;
  parameter int DBW = DW/8;                    // Byte Width

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [3:0]  q;
  } gpio_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } gpio_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    logic [3:0]  q;
    logic        qe;
  } gpio_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic [3:0]  q;
    logic        qe;
  } gpio_reg2hw_direct_out_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } mask;
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } data;
  } gpio_reg2hw_masked_out_lower_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } mask;
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } data;
  } gpio_reg2hw_masked_out_upper_reg_t;

  typedef struct packed {
    logic [3:0]  q;
    logic        qe;
  } gpio_reg2hw_direct_oe_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } mask;
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } data;
  } gpio_reg2hw_masked_oe_lower_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } mask;
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } data;
  } gpio_reg2hw_masked_oe_upper_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } gpio_reg2hw_intr_ctrl_en_rising_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } gpio_reg2hw_intr_ctrl_en_falling_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } gpio_reg2hw_intr_ctrl_en_lvlhigh_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } gpio_reg2hw_intr_ctrl_en_lvllow_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } gpio_reg2hw_ctrl_en_input_filter_reg_t;

  typedef struct packed {
    logic [3:0]  d;
    logic        de;
  } gpio_hw2reg_intr_state_reg_t;

  typedef struct packed {
    logic [3:0]  d;
    logic        de;
  } gpio_hw2reg_data_in_reg_t;

  typedef struct packed {
    logic [3:0]  d;
  } gpio_hw2reg_direct_out_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  d;
    } data;
    struct packed {
      logic [1:0]  d;
    } mask;
  } gpio_hw2reg_masked_out_lower_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  d;
    } data;
    struct packed {
      logic [1:0]  d;
    } mask;
  } gpio_hw2reg_masked_out_upper_reg_t;

  typedef struct packed {
    logic [3:0]  d;
  } gpio_hw2reg_direct_oe_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  d;
    } data;
    struct packed {
      logic [1:0]  d;
    } mask;
  } gpio_hw2reg_masked_oe_lower_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  d;
    } data;
    struct packed {
      logic [1:0]  d;
    } mask;
  } gpio_hw2reg_masked_oe_upper_reg_t;

  // Register -> HW type
  typedef struct packed {
    gpio_reg2hw_intr_state_reg_t intr_state; // [66:63]
    gpio_reg2hw_intr_enable_reg_t intr_enable; // [62:59]
    gpio_reg2hw_intr_test_reg_t intr_test; // [58:54]
    gpio_reg2hw_direct_out_reg_t direct_out; // [53:49]
    gpio_reg2hw_masked_out_lower_reg_t masked_out_lower; // [48:43]
    gpio_reg2hw_masked_out_upper_reg_t masked_out_upper; // [42:37]
    gpio_reg2hw_direct_oe_reg_t direct_oe; // [36:32]
    gpio_reg2hw_masked_oe_lower_reg_t masked_oe_lower; // [31:26]
    gpio_reg2hw_masked_oe_upper_reg_t masked_oe_upper; // [25:20]
    gpio_reg2hw_intr_ctrl_en_rising_reg_t intr_ctrl_en_rising; // [19:16]
    gpio_reg2hw_intr_ctrl_en_falling_reg_t intr_ctrl_en_falling; // [15:12]
    gpio_reg2hw_intr_ctrl_en_lvlhigh_reg_t intr_ctrl_en_lvlhigh; // [11:8]
    gpio_reg2hw_intr_ctrl_en_lvllow_reg_t intr_ctrl_en_lvllow; // [7:4]
    gpio_reg2hw_ctrl_en_input_filter_reg_t ctrl_en_input_filter; // [3:0]
  } gpio_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    gpio_hw2reg_intr_state_reg_t intr_state; // [33:29]
    gpio_hw2reg_data_in_reg_t data_in; // [28:24]
    gpio_hw2reg_direct_out_reg_t direct_out; // [23:20]
    gpio_hw2reg_masked_out_lower_reg_t masked_out_lower; // [19:16]
    gpio_hw2reg_masked_out_upper_reg_t masked_out_upper; // [15:12]
    gpio_hw2reg_direct_oe_reg_t direct_oe; // [11:8]
    gpio_hw2reg_masked_oe_lower_reg_t masked_oe_lower; // [7:4]
    gpio_hw2reg_masked_oe_upper_reg_t masked_oe_upper; // [3:0]
  } gpio_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] GPIO_INTR_STATE_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] GPIO_INTR_ENABLE_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] GPIO_INTR_TEST_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] GPIO_DATA_IN_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] GPIO_DIRECT_OUT_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] GPIO_MASKED_OUT_LOWER_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] GPIO_MASKED_OUT_UPPER_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] GPIO_DIRECT_OE_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] GPIO_MASKED_OE_LOWER_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] GPIO_MASKED_OE_UPPER_OFFSET = 6'h 24;
  parameter logic [BlockAw-1:0] GPIO_INTR_CTRL_EN_RISING_OFFSET = 6'h 28;
  parameter logic [BlockAw-1:0] GPIO_INTR_CTRL_EN_FALLING_OFFSET = 6'h 2c;
  parameter logic [BlockAw-1:0] GPIO_INTR_CTRL_EN_LVLHIGH_OFFSET = 6'h 30;
  parameter logic [BlockAw-1:0] GPIO_INTR_CTRL_EN_LVLLOW_OFFSET = 6'h 34;
  parameter logic [BlockAw-1:0] GPIO_CTRL_EN_INPUT_FILTER_OFFSET = 6'h 38;

  // Reset values for hwext registers and their fields
  parameter logic [3:0] GPIO_INTR_TEST_RESVAL = 4'h 0;
  parameter logic [3:0] GPIO_INTR_TEST_GPIO_RESVAL = 4'h 0;
  parameter logic [3:0] GPIO_DIRECT_OUT_RESVAL = 4'h 0;
  parameter logic [3:0] GPIO_MASKED_OUT_LOWER_RESVAL = 4'h 0;
  parameter logic [3:0] GPIO_MASKED_OUT_UPPER_RESVAL = 4'h 0;
  parameter logic [3:0] GPIO_DIRECT_OE_RESVAL = 4'h 0;
  parameter logic [3:0] GPIO_MASKED_OE_LOWER_RESVAL = 4'h 0;
  parameter logic [3:0] GPIO_MASKED_OE_UPPER_RESVAL = 4'h 0;

  // Register index
  typedef enum int {
    GPIO_INTR_STATE,
    GPIO_INTR_ENABLE,
    GPIO_INTR_TEST,
    GPIO_DATA_IN,
    GPIO_DIRECT_OUT,
    GPIO_MASKED_OUT_LOWER,
    GPIO_MASKED_OUT_UPPER,
    GPIO_DIRECT_OE,
    GPIO_MASKED_OE_LOWER,
    GPIO_MASKED_OE_UPPER,
    GPIO_INTR_CTRL_EN_RISING,
    GPIO_INTR_CTRL_EN_FALLING,
    GPIO_INTR_CTRL_EN_LVLHIGH,
    GPIO_INTR_CTRL_EN_LVLLOW,
    GPIO_CTRL_EN_INPUT_FILTER
  } gpio_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] GPIO_PERMIT [15] = '{
    4'b 0001, // index[ 0] GPIO_INTR_STATE
    4'b 0001, // index[ 1] GPIO_INTR_ENABLE
    4'b 0001, // index[ 2] GPIO_INTR_TEST
    4'b 0001, // index[ 3] GPIO_DATA_IN
    4'b 0001, // index[ 4] GPIO_DIRECT_OUT
    4'b 0001, // index[ 5] GPIO_MASKED_OUT_LOWER
    4'b 0001, // index[ 6] GPIO_MASKED_OUT_UPPER
    4'b 0001, // index[ 7] GPIO_DIRECT_OE
    4'b 0001, // index[ 8] GPIO_MASKED_OE_LOWER
    4'b 0001, // index[ 9] GPIO_MASKED_OE_UPPER
    4'b 0001, // index[10] GPIO_INTR_CTRL_EN_RISING
    4'b 0001, // index[11] GPIO_INTR_CTRL_EN_FALLING
    4'b 0001, // index[12] GPIO_INTR_CTRL_EN_LVLHIGH
    4'b 0001, // index[13] GPIO_INTR_CTRL_EN_LVLLOW
    4'b 0001  // index[14] GPIO_CTRL_EN_INPUT_FILTER
  };

  parameter type reg_req_t = struct packed {
    logic           valid;
    logic           write;
    logic [AW-1:0]  addr;
    logic [DW-1:0]  wdata;
    logic [DBW-1:0] wstrb;
  };

  parameter type reg_rsp_t = struct packed {
    logic [DW-1:0]  rdata;
    logic           error;
    logic           ready;
  };

endpackage
